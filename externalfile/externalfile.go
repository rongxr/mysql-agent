// Code generated by go-bindata.
// sources:
// externalfile/cert/server.crt
// externalfile/cert/server.key
// DO NOT EDIT!

package externalfile

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _externalfileCertServerCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\xcb\xae\xab\x36\x14\x40\xe7\x48\xfc\x43\xe7\x51\x05\x09\x21\x8f\xc1\x1d\xd8\x60\x08\x6f\x4c\x4c\x80\xcc\x78\x85\x57\x80\x10\x20\xe6\xe4\xeb\xab\x73\x5a\x55\xed\x55\x7b\x8f\x87\xcb\x7b\x0f\x96\xb4\xb4\x7f\xff\x7c\x10\xa9\x9a\xfd\x9b\x84\x3c\xa2\x29\x9a\x04\x08\xfa\xa2\x2c\x63\x69\x9a\xbc\x27\x92\x04\xa6\xa0\x00\x54\x83\xa0\xd0\x7c\xd0\xf2\xbd\x32\x97\xcf\xf4\xda\x34\x81\x15\x8b\x3a\x59\x09\xd6\x56\x58\x1b\x7e\x4f\x65\x1c\xe9\x46\x7f\xd5\xca\x57\x6a\x03\x8c\x4c\x96\x81\x18\xd0\x22\xf2\x17\xe9\x0d\x74\x58\xd8\x17\x08\x22\x02\x1a\xdb\xb1\x3c\x40\xe5\x22\x92\x2f\x18\x6b\x32\xc8\x86\x38\x50\xe6\xab\x60\xaf\x2d\x3c\x52\x09\x7f\xf1\x93\x0c\xf4\x99\x65\xe2\x1a\xd9\x16\x18\x55\xb0\xf6\x91\x54\x50\x94\x04\xf7\x2e\x23\xc8\xb2\x40\xff\x27\xa3\x54\xce\x4e\x76\x67\x79\x3e\x45\xf4\x6b\x53\x96\xc1\x22\x46\x81\xd8\xe5\x6d\xf9\x60\x99\x5c\xbd\xbf\x92\x36\x5d\xb4\x37\x28\x61\xd1\x0c\x65\x53\xa9\x47\xca\x43\x09\xa3\x40\x39\xdd\xcb\xa4\xcd\x76\xb1\x7a\xdf\xc6\xc1\x71\xbe\xf2\x70\x8a\x83\x6c\x6d\xb6\xf6\x6c\xc1\x6d\x28\x13\x8d\xb2\x8c\x45\xd0\x62\xd7\x40\xb0\x48\xca\x3b\x4a\x1f\xca\xc4\xa2\x5f\x4c\xfe\x9b\xfd\xd2\x92\x65\xbe\xf3\xfc\xce\x92\x65\xbe\xf3\xfc\xce\x92\x65\xfe\xd7\x53\xd3\xa0\x56\x03\xfb\x9f\x5b\x00\x23\x05\x00\x47\x02\xf8\x00\x3e\xff\xa5\xc2\x90\x58\x06\x60\x04\xde\x55\xf3\x6c\x9b\xca\xc0\xb7\x3d\x2a\x97\xbc\x5a\x5d\xc4\x9b\x21\x39\xb6\x21\xf5\xf5\x5b\x7d\x0b\x6b\x45\x1e\xea\xd4\x15\xd0\xda\x7e\xc2\xe7\x32\x0b\xfd\xe6\xfc\xa2\xcf\xc9\xbd\x5e\x3e\x58\x46\xd2\x15\x51\xd7\xf7\xf0\xd5\x64\x9d\x6c\x88\xca\xbe\xa8\x8e\x31\xef\x9c\x60\x03\xba\x74\x26\xfa\xd5\x98\xb5\x3e\xcd\x2a\x0f\x6d\x9e\x02\x4e\x67\xdb\x6b\x8a\x5c\xdb\x24\x30\x68\xf9\x43\x8c\x05\x96\xd9\xaa\x8b\xed\x53\xe5\x36\x77\xa3\xbc\xca\xa6\x4a\xa8\x35\x21\x30\xa5\x43\x11\x8a\xfb\x8a\x4c\x07\x7e\x7f\xda\xcc\x07\xf8\x91\xf4\xaf\x86\xeb\xa6\x93\xf9\x78\x84\x5c\x3a\xbf\x6c\x00\x37\x9d\x15\x13\x96\x39\xed\x8a\xc8\xf6\xee\xd1\x6c\x1e\x42\xb2\xe7\x07\x11\xd4\x3b\x6f\x7d\xf4\xd3\xfe\x91\x0c\xe4\x2a\xfa\xc4\x9d\xdc\x3e\x78\x68\x23\x58\x82\x6c\x70\xc8\xd5\xc7\xef\x9b\x62\xf3\xd4\xf0\xc2\x4b\x48\x59\xc6\xac\xf7\xb3\x29\x7b\x1f\xe2\xae\x8c\x76\x48\x08\x56\x8a\x19\x08\xe1\x38\xd8\x8b\x86\xd2\xf4\x86\x8a\x13\xc7\x4b\x7a\x81\x41\x0f\xf2\x7d\xdf\xa6\xd2\xf1\x31\x3f\xb9\xc6\x86\x49\x2c\x6c\xc0\x33\x65\x99\x63\x21\x97\x8a\xce\x65\xe7\x84\x77\x86\xdd\x4e\x8e\xec\xa1\x10\x8b\x13\xe7\x7f\x66\x82\x01\xec\xd7\x16\xf5\x09\xc8\x3e\x6b\x3a\xe1\x2d\x52\x0a\xec\xaf\x23\x29\x89\x38\xaf\x48\xf8\x68\xcb\x32\xe3\x8a\x4e\x97\x0d\xca\x1b\x57\x7f\x21\xd0\xd0\xd3\x67\x13\x1e\x5f\x43\x58\x50\xa5\x07\xff\x9a\xfe\x79\x56\xa6\x5f\x4d\x7a\x3c\x01\xf8\xc4\x41\xe0\x53\x40\x11\xe4\xde\x3f\x37\x30\xfe\xd5\x00\x02\x52\x39\x85\xb0\x75\xeb\x3b\x54\x44\xde\x3d\xe4\x8a\x2a\x51\x96\x71\xf7\x53\x2c\xc0\x63\xed\xae\xe7\xce\xbf\x18\x06\xbc\x61\xb1\x76\xd3\x8b\x5c\xf2\x95\x14\xa6\x9d\x9e\x3f\xab\xc0\x1d\xef\xbb\x9e\x1c\xec\xe4\x6a\x3a\x6a\x7c\x1e\xaf\x51\x7e\x9b\x7a\x57\x97\x9c\x9a\x65\xe2\xe9\x2c\x38\x83\x57\xfa\x37\x81\xe3\x83\x9c\x38\x49\xbb\x70\x99\x6f\x1c\x60\xb6\xc4\xb6\xc2\xad\xf6\x1b\x18\xf9\x8a\x53\x6e\x77\xb9\x05\xab\xdb\x05\x05\xde\xbe\x36\xed\x17\x40\xed\xc6\x97\x35\x96\xe9\x5d\x2e\xe9\x4c\xc1\x23\xd9\x23\x44\x4b\x7d\xd5\xb7\xe1\x59\x7d\xcd\x55\x7c\x14\xcf\x31\x6f\xa8\x34\xd6\xa8\x3b\xcd\x23\x76\xc2\x67\xeb\x59\x2d\xd7\x66\x78\x5d\x2c\x03\xb4\x6e\x15\x57\x46\x57\x96\x89\x9c\xf5\xcd\x5e\x32\x27\x94\xf4\x97\x37\x92\x88\x7c\x3c\xce\xaf\xcd\xb0\xba\x77\x9d\x37\x5a\xad\x15\xaa\xfc\x47\x34\x0c\x55\x64\x3e\x0b\x2d\xbb\xa7\xa1\x90\xdf\x97\xa2\x2a\xa2\xc9\x0c\x57\xca\xb2\x61\x99\x87\x67\x5c\x80\x7b\xc9\x9f\x66\x58\xdf\x76\x82\x14\x8f\x5e\x90\x53\xe8\x82\xe5\xf3\x08\x24\xe7\xc7\xc7\x6b\xc1\x31\xb8\x59\xae\x53\x36\x8e\xba\x71\xce\x64\xae\xef\x2a\xc4\x23\x4c\xba\xb7\xbc\x65\x19\x93\xfe\xf8\xc1\x32\x5f\x67\x17\xd9\xf2\x7f\x9c\xe2\x3f\x02\x00\x00\xff\xff\x50\x36\x3b\xd8\xa8\x05\x00\x00")

func externalfileCertServerCrtBytes() ([]byte, error) {
	return bindataRead(
		_externalfileCertServerCrt,
		"externalfile/cert/server.crt",
	)
}

func externalfileCertServerCrt() (*asset, error) {
	bytes, err := externalfileCertServerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "externalfile/cert/server.crt", size: 1448, mode: os.FileMode(438), modTime: time.Unix(1605511068, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _externalfileCertServerKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd5\x37\x0e\xab\x58\x00\x85\xe1\x1e\x89\x3d\xbc\x1e\x8d\x4c\xb4\xa1\x24\x5c\xa2\x09\x26\xe3\x8e\x78\x6d\x93\x73\x58\xfd\x68\x5e\x3d\xa7\x3c\xd5\xdf\x7d\xff\xfc\x37\x01\x28\x9a\xf5\xc7\x71\xb5\x90\xf7\xc1\x1f\x03\x24\x7f\x5f\x14\x31\x35\x0d\x6c\x50\x13\x78\x89\xb7\x04\x58\x8f\x9f\xfa\xab\x70\x3b\x2e\xf0\x2f\x20\xf3\xbc\x27\x0a\x06\xdc\x21\xf4\x6a\x1e\x02\x9e\xef\x35\x81\x7f\x49\xb6\xe1\xad\xa9\xa7\x0d\xc2\x6d\xf6\x54\x14\x91\xef\x4f\x26\x6e\xd8\x5e\xa3\xf1\xde\xf8\x3a\x66\xe6\x54\x41\x60\x8f\xd6\x7e\xcb\xfd\x80\x9c\x95\x4d\x79\x94\xbf\xb7\x71\x13\x57\x9c\x6b\x62\x4d\xab\xe3\xba\xee\x66\x05\x73\xc9\xdc\x9c\xea\x78\x45\x11\xf1\x49\x4c\x2f\x3a\x57\x5e\x62\x71\x32\x66\x53\x8f\xf4\xf7\x73\x90\x3a\xf0\xd3\xad\x10\x4e\x9a\x50\x3c\x81\xfe\xbd\x67\x39\xcd\xfc\x63\x90\x2a\x98\x01\xc2\xe7\x43\xec\x5e\xee\x0e\x43\x92\xcf\x12\x45\xcc\x5f\x91\xcc\xcf\x53\xa8\xba\x55\xb7\xa9\xcb\x9f\xab\xf4\xb1\xab\xfa\xfa\xc5\x7c\xac\xc4\xf3\xb5\x6d\x2a\xee\xbc\xb3\x38\xaf\xa6\xf9\x31\x98\xd5\x28\x40\x42\x09\xbf\xf4\x76\x14\xce\xe6\x4d\x35\x8a\x88\xce\xa0\xc6\x84\x7b\x7e\x9b\x75\xb0\xba\xc6\x35\x31\x1c\xfb\xa4\xf5\x77\x97\xe4\x37\xd9\x33\x56\xe3\x4a\x16\x1b\x50\x3e\x3f\xc8\x45\x58\xf1\xab\xb3\xd2\xb3\xa5\x3e\xbb\x51\xfe\xf5\x7e\x91\xd1\x28\x12\x2c\x59\x51\x9e\x3d\x05\xa0\x7b\x1c\xac\xc7\x57\xb7\x97\xd6\x0a\xbc\x08\x85\xc7\xfa\x7d\xef\x4f\xb2\xbd\x6f\xd8\x0b\x97\x97\xa9\x4a\xc4\xe5\x22\x79\x1b\x04\x1d\x47\xe8\xdb\xeb\x3e\x4d\xbd\x05\x51\x84\x1c\xa5\x96\xaf\x38\x97\x87\xa6\xc0\xf3\x40\x84\x10\x08\xbc\xa6\x54\xa1\x2f\x61\xef\x03\xbb\x3e\x95\x2a\x0e\xe6\xcd\xbd\xe4\xf4\x9e\xdf\x3f\x4f\x77\x78\xfe\xb0\x67\x56\xd1\x71\x5f\xd8\x03\xa3\xa0\x88\x3c\x67\x54\x41\x26\x23\xfb\x2e\x68\x3c\x20\x1b\xf7\x5a\xbb\x3b\xd7\xc0\x1a\x78\xba\xa5\xae\x58\x47\x12\xc9\x11\x0b\x3a\xb1\x51\xae\xaa\x9e\xe9\xdd\x25\x35\xe2\xa9\xf8\x49\x84\xb1\x5b\x23\x9a\x28\x52\xfb\xb3\x5c\x91\xb3\xf9\x28\x9b\x29\xba\xb0\x67\x73\x32\xa5\x01\x21\x68\x4e\xf5\x64\x27\x56\x2b\x18\x6b\x08\x48\xce\x78\xc9\x9b\xaf\xd9\x44\xaa\x72\xaf\x2f\x7e\x44\x45\x67\x85\x3b\x21\x1c\x00\x45\xa2\x84\x23\xcd\xd7\xfa\xcd\x09\x93\x5c\xb6\x50\x9f\xe7\x49\x9c\x4d\xbe\x5f\x7e\xec\xd2\x9c\x99\xe7\x38\x49\x0f\x8a\x42\xe0\x46\x9c\xc8\x7a\xa5\x08\xe7\x8f\xfc\x4e\xf2\xfd\xf0\x09\xfc\xf0\xd6\x1e\x45\x9a\xb1\xf9\x10\x31\x46\xea\x4c\xc2\x70\xa3\xbd\xc7\xd9\xd0\xc0\xc6\x56\x95\x91\x75\x84\x81\x1b\x6d\xe7\x49\x36\x85\x2b\x9f\xa0\x35\x3f\x36\xbb\x83\x04\xfb\x08\xa7\x31\x45\xc0\x90\x70\xa3\x12\x51\x64\x89\xca\x9a\x90\xda\x1a\x66\x07\x90\x68\x05\x92\xc4\x32\x9f\xde\x34\x46\x52\x27\xb3\x0b\x91\x3a\xc1\xc9\x24\xef\x7b\xb7\x8d\x40\x84\x09\xe0\x1f\x67\x6a\x18\x3b\xa5\xb4\xe4\x96\xdf\xcf\x4d\x41\x91\x75\xf0\xc8\xbb\x70\x18\x78\xf4\xf2\x96\xcc\xca\xe8\x75\xdb\x8d\x2c\x9a\x09\x57\x66\x85\x53\xbb\xf8\xc9\xaf\x7e\x91\xd1\x3a\xf4\x23\x7e\xd5\x0f\x27\x4d\xf1\xe0\xd2\xcd\x44\xd5\xe3\xba\x6e\x8e\x0c\x45\xcc\xa3\x5e\x7e\x34\xf5\x2a\xed\x2d\x94\x2f\x60\x84\x12\xd9\x29\x52\x27\x8f\xea\xe8\x5d\xf8\x83\xea\xd6\x62\xd5\x57\x36\x08\xde\x5b\x22\x7a\xd7\x93\xc3\x9c\xf2\x48\xa5\x9a\xef\xd4\x5d\x9b\x4b\x80\x22\x1e\x93\xbe\xdd\x43\xcc\x2f\x36\x07\xd5\x92\xad\x76\x17\x17\xb5\x89\x47\x41\x16\xfc\xad\xa6\x0c\x2c\x3b\x62\x2e\x0a\x43\x91\xa2\x31\x23\xbf\x7f\xd8\x55\x49\x85\x26\x80\x1d\xeb\xfe\xb8\x1a\x45\x32\xd7\xb7\xed\xb4\x4c\xd7\x96\xe2\x4a\x0d\x30\x69\x44\x03\xfa\x76\x46\x8e\xfe\xc5\xb7\xfa\xab\xb4\x09\x6f\x1b\x46\x3d\x6c\xf6\x5e\x5f\x37\xc1\x4c\xd4\xc7\x6d\xd5\x7f\x86\x2f\x5b\x85\x16\xab\x0a\x8a\xb4\xfa\x10\x9f\xd7\x03\x77\x7c\xd1\x9e\xf4\xe0\x91\x01\xcb\x0e\x60\x4e\xcf\x14\x6d\x35\x9c\x94\x76\x44\xc0\xaa\xba\x59\xbd\x6a\xcb\x6b\x37\x25\xfc\x9d\x91\x5f\xde\xb8\xe3\xf5\x63\x84\x9f\xa4\xe6\x28\x62\xe4\xd8\x1c\xcf\xb7\x68\x34\x70\x11\x26\x7c\xdd\x32\xca\xc8\x24\xd2\x91\xa6\x32\xd5\xd5\x5b\x91\xb0\xef\x8c\x8e\x7f\x5e\x61\xb0\x3d\xf4\xf7\xaa\x96\x19\x49\x90\x0e\xd8\xfb\xe7\x53\xd9\x81\x8f\x22\x98\xb3\xdd\x4a\x6d\x48\x03\xd9\x92\xb4\x13\x67\xaf\x9b\xea\xa8\x5b\xf0\xb9\x1f\xbc\x28\xd3\xa0\x4c\x82\x43\x53\x7d\x9c\x75\x43\x62\x50\xc9\x6f\x13\x6b\x63\x57\x4e\x02\x25\xe6\x87\xe3\x33\x39\x8d\x22\x22\x17\xc0\x5d\x87\xd3\x50\x70\xac\xc8\x73\x3b\x3b\x8b\x94\xca\x75\xaa\x0b\xdb\xd9\xf3\x19\x15\x70\xa9\xb8\x36\x1f\x65\x81\x82\x61\xfc\x8e\x25\xec\x48\xa0\xda\x22\xb7\xbf\x0c\x01\xaa\xe2\x0d\x45\x56\x66\x0e\xc6\x69\x2f\xee\x20\xfa\xc2\xe9\x61\x6f\xa1\x13\xe4\x39\xe6\x04\x6a\xd1\x65\xc5\xf9\x36\x19\x2c\xb3\x2c\xb6\xc7\xcd\x77\xf5\xc6\xc5\xc1\x16\x84\xf5\xe6\x65\x63\x5e\x45\xc2\xde\x4c\x33\x8a\xbc\x4d\xee\x11\x16\xe3\x49\x5d\xb7\x61\x6c\xb7\xb6\x19\xbb\xd5\xaf\xfc\x92\xe9\xb3\xf5\xf0\x4c\xdc\x61\xbd\x20\x6e\x18\x78\x31\x0e\x25\xf5\xbb\x51\x1e\x83\xda\x49\x24\xaf\x34\x9b\x2c\x17\xf8\x86\x22\x3b\x46\x0c\xb9\x7b\xc3\x5a\x22\x0d\x2c\x87\x0f\x06\xe6\x90\xb2\x99\x05\x61\xfa\x0c\xc9\x5e\x22\x55\x09\xa3\xcb\xcf\xa7\xe1\x7b\x45\xe0\x6d\x87\xf9\x34\xba\x7c\x25\x77\x90\x3c\xe1\x21\x70\x07\x83\x22\x97\xb1\x85\x52\x72\x15\x22\x94\xf2\xf5\xb2\x7f\xc2\x46\x48\x9c\xaf\x2d\x0b\x17\xb7\xc0\xa1\x0e\x3f\xc4\x48\x7d\xda\xdf\x44\x40\x2d\xea\x36\x8d\xdf\x87\x0a\xdd\x52\xe5\xea\xf8\xc5\xa8\x5e\xd9\xa2\x88\x19\x6e\x12\xd1\x39\x9a\x93\x7f\x30\x57\x3d\x9f\x39\x7d\x38\x9d\xa6\xbc\x94\x96\x8b\xf5\xa8\x72\x6f\xf7\xa2\xfd\x7e\x7e\xa6\x58\xf1\x69\x72\x71\xcd\xf0\xd8\xad\x77\xb7\xc8\x95\xb5\xef\x4e\xe8\x3d\x51\x04\x70\x82\xf5\xdb\x13\xdd\xd7\x45\x82\x75\x64\xe7\x4b\x17\x98\x88\xf7\x13\x8a\xfc\x25\x09\x58\xd2\xff\x30\xf5\x6f\x00\x00\x00\xff\xff\xfe\x1a\xf6\x30\xc4\x06\x00\x00")

func externalfileCertServerKeyBytes() ([]byte, error) {
	return bindataRead(
		_externalfileCertServerKey,
		"externalfile/cert/server.key",
	)
}

func externalfileCertServerKey() (*asset, error) {
	bytes, err := externalfileCertServerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "externalfile/cert/server.key", size: 1732, mode: os.FileMode(438), modTime: time.Unix(1605511046, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"externalfile/cert/server.crt": externalfileCertServerCrt,
	"externalfile/cert/server.key": externalfileCertServerKey,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"externalfile": &bintree{nil, map[string]*bintree{
		"cert": &bintree{nil, map[string]*bintree{
			"server.crt": &bintree{externalfileCertServerCrt, map[string]*bintree{}},
			"server.key": &bintree{externalfileCertServerKey, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

